// Code generated by protoc-gen-go. DO NOT EDIT.
// source: room.proto

package proto

import (
	"context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	"google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StreamRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamRequest) Reset()         { *m = StreamRequest{} }
func (m *StreamRequest) String() string { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()    {}
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fd27dd97284ef4, []int{0}
}

func (m *StreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamRequest.Unmarshal(m, b)
}
func (m *StreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamRequest.Marshal(b, m, deterministic)
}
func (m *StreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamRequest.Merge(m, src)
}
func (m *StreamRequest) XXX_Size() int {
	return xxx_messageInfo_StreamRequest.Size(m)
}
func (m *StreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamRequest proto.InternalMessageInfo

func (m *StreamRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type StreamResponse struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamResponse) Reset()         { *m = StreamResponse{} }
func (m *StreamResponse) String() string { return proto.CompactTextString(m) }
func (*StreamResponse) ProtoMessage()    {}
func (*StreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fd27dd97284ef4, []int{1}
}

func (m *StreamResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamResponse.Unmarshal(m, b)
}
func (m *StreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamResponse.Marshal(b, m, deterministic)
}
func (m *StreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamResponse.Merge(m, src)
}
func (m *StreamResponse) XXX_Size() int {
	return xxx_messageInfo_StreamResponse.Size(m)
}
func (m *StreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamResponse proto.InternalMessageInfo

func (m *StreamResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func RegisterStreamServiceServer(s *grpc.Server, srv StreamServiceServer) {
	s.RegisterService(&_StreamService_serviceDesc, srv)
}

var _StreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "room.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServiceTest",
			Handler:    _ServiceTest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		// {
		// 	StreamName:    "T",
		// 	Handler:       _StreamService_List_Handler,
		// 	ServerStreams: true,
		// },
		{
			StreamName:    "ClientStream",
			Handler:       _ClientStream_Handler,
			ClientStreams: true,
		},
		// {
		// 	StreamName:    "Route",
		// 	Handler:       _StreamService_Route_Handler,
		// 	ServerStreams: true,
		// 	ClientStreams: true,
		// },
	},
	Metadata: "room.proto",
}

//service handler
func _ServiceTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).ServiceTest(in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/room.StreamService/ServiceTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).ServiceTest(req.(*StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// server
type StreamServiceServer interface {
	ServiceTest(*StreamRequest) (*StreamResponse, error)
	// Record(StreamService_RecordServer) error
	// Route(StreamService_RouteServer) error
}

// client
type StreamServiceClient interface {
	ServiceTest(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamResponse, error)
	ClientStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (ClientStream, error)
}

type streamServiceClient struct {
	cc *grpc.ClientConn
}

func NewStreamServiceClient(cc *grpc.ClientConn) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) ServiceTest(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamResponse, error) {
	out := new(StreamResponse)
	err := c.cc.Invoke(ctx, "/room.StreamService/ServiceTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type ClientStream interface {
	Send(*StreamRequest) error
	CloseAndRecv() (*StreamResponse, error)
	grpc.ClientStream
}

type clientStream struct {
	grpc.ClientStream
}

func (x *clientStream) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientStream) CloseAndRecv() (*StreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServiceClient) ClientStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (ClientStream, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamService_serviceDesc.Streams[0], "/room.StreamService/Record", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientStream{stream}
	return x, nil
}

func _ClientStream_Handler

func init() {
	proto.RegisterType((*StreamRequest)(nil), "proto.StreamRequest")
	proto.RegisterType((*StreamResponse)(nil), "proto.StreamResponse")
}

func init() { proto.RegisterFile("room.proto", fileDescriptor_c5fd27dd97284ef4) }

var fileDescriptor_c5fd27dd97284ef4 = []byte{
	// 155 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0xca, 0xcf, 0xcf,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0xca, 0x5c, 0xbc, 0xc1, 0x25,
	0x45, 0xa9, 0x89, 0xb9, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x42, 0x5c, 0x2c, 0x79,
	0x89, 0xb9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x92, 0x0a, 0x17, 0x1f,
	0x4c, 0x51, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0x2a, 0x36, 0x55, 0x46, 0xe7, 0x19, 0x61, 0x66, 0x05,
	0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x0a, 0xd9, 0x70, 0x71, 0x43, 0x99, 0x21, 0x20, 0xa3, 0x45,
	0x20, 0x56, 0xeb, 0xa1, 0x58, 0x28, 0x25, 0x8a, 0x26, 0x0a, 0xb1, 0x41, 0x89, 0x41, 0xc8, 0x9e,
	0x8b, 0xc7, 0x39, 0x27, 0x33, 0x35, 0xaf, 0x04, 0x22, 0x43, 0xa2, 0x76, 0x0d, 0x46, 0x90, 0x01,
	0x20, 0xeb, 0x53, 0x8b, 0xc8, 0x32, 0xc0, 0x80, 0x31, 0x89, 0x0d, 0x2c, 0x63, 0x0c, 0x08, 0x00,
	0x00, 0xff, 0xff, 0x7e, 0x45, 0xf0, 0x69, 0x38, 0x01, 0x00, 0x00,
}
